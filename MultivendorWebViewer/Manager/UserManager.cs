using MultivendorWebViewer.Common;
using MultivendorWebViewer.Server.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;

namespace MultivendorWebViewer.Manager
{
    public class UserManager:SingletonBase<UserManager>
    {
        public User GetUserByUsername(string userName)
        {
            var allUsers = GetAllUsers();
            return allUsers[userName].FirstOrDefault();

        }
        public User GetUserByUserId(int id)
        {
            using (var context = new ServerModelContext(ServerModelDatabaseContextManager.Default.GetConnectionString()))
            {
                var user = context.Users.Where(p => p.Id == id).FirstOrDefault();
                return user;
            }

        }
        public Customer GetCustomerById(int id)
        {
            var allCustomer = GetAllCustomer();
            return allCustomer[id].FirstOrDefault();

        }
        public ILookup<string, User> GetAllUsers()
        {
            return CacheManager.Default.Get<ILookup<string, User>>(string.Concat("AllUser@", "MultivendorWeb"), CacheLocation.Application, () =>
            {
                using (var context = new ServerModelContext(ServerModelDatabaseContextManager.Default.GetConnectionString()))
                {
                    var allUsers = context.Users.ToLookup(t => t.UserName);
                    return allUsers;
                }
            });
        }
        public ILookup<int, Customer> GetAllCustomer()
        {
            return CacheManager.Default.Get<ILookup<int, Customer>>(string.Concat("AllCustomer@", "MultivendorWeb"), CacheLocation.Application, () =>
            {
                using (var context = new ServerModelContext(ServerModelDatabaseContextManager.Default.GetConnectionString()))
                {
                    var allCustomers = context.Customers.ToLookup(t => t.Id);
                    return allCustomers;
                }
            });
        }
        //public virtual string PlaceOrder(ApplicationRequestContext applicationRequestContext)
        //{
        //    var order = applicationRequestContext.OrderManager.GetCurrentOrder(applicationRequestContext);
        //    var orderReference = applicationRequestContext.OrderManager.GetAutoGeneratedOrderNumber();

        //    using (var context = new ServerModelContext(ServerModelDatabaseContextManager.Default.GetConnectionString()))
        //    {
        //        //Save customer
        //        if (order.Customer != null)
        //        {
        //            Customer customer = order.Customer;
        //            Customer newCustomer = context.UpdateGraph<Customer>(customer);
        //            context.SaveChanges();
        //            order.CustomerId = newCustomer.Id;
        //            //order.Customer = null;
        //        }
        //        order.OrderReference = orderReference;
        //        //Save orderLines
        //        var orderLines = order.OrderLines;
        //        //order.OrderLines = null;
        //        Order newOrder = context.UpdateGraph<Order>(order);
        //        context.SaveChanges();
        //        foreach (var lines in orderLines)
        //        {
        //            lines.OrderId = newOrder.Id;
        //            //lines.Order = null;
        //            OrderLine newLine = context.UpdateGraph<OrderLine>(lines);
        //            context.SaveChanges();
        //        }
        //        //Save Order
        //    }
        //    return orderReference;
        //}

    }
}