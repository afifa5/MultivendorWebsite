using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using MultivendorWebViewer.ViewModels;
using MultivendorWebViewer.Models;
using MultivendorWebViewer.Common;
using System.Data.SqlClient;
using System.Data;
using System.Data.Entity;
using System.Data.Entity.Core;
using System.Threading.Tasks;
using System.IO;
using RefactorThis.GraphDiff;
using MultivendorWebViewer.Server.Models;

namespace MultivendorWebViewer.Manager
{
    public class OrderManager:SingletonBase<OrderManager>
    {
        private static object autoOrderNumberLock = new object();
        private static int? autoOrderNumberPropertyId = null;
        AutoOrderNumberSettings AutoOrderNumberSetting { get; set; } = new AutoOrderNumberSettings();
        public virtual Order GetCurrentOrder(ApplicationRequestContext applicationRequestContext)
        {
 
            if (applicationRequestContext.SessionData == null) return null;
            var sessionOrders = applicationRequestContext.SessionData.Orders;
            var siteOrder = sessionOrders.GetOrAdd("MultivendorWebOrder", order =>
            {
                return new Order();
            });

            return siteOrder;
        }
        public virtual void SetCurrentOrder(ApplicationRequestContext applicationRequestContext, Order order)
        {
            var sessionOrders = applicationRequestContext.SessionData.Orders;
            if (order != null && order.OrderLines!=null && order.OrderLines.Any())
            {
                sessionOrders["MultivendorWebOrder"] = order;
            }
            else
            {
                ((System.Collections.IDictionary)sessionOrders).Remove("MultivendorWebOrder");
            }
        }
        public virtual string PlaceOrder(ApplicationRequestContext applicationRequestContext)
        {
          var order = applicationRequestContext.OrderManager.GetCurrentOrder(applicationRequestContext);
          var orderReference = applicationRequestContext.OrderManager.GetAutoGeneratedOrderNumber();

            using (var context = new ServerModelContext(ServerModelDatabaseContextManager.Default.GetConnectionString()))
            {
                //Save customer
                if (order.Customer != null) {
                    Customer customer = order.Customer;
                    Customer newCustomer = context.UpdateGraph<Customer>(customer);
                    context.SaveChanges();
                    order.CustomerId = newCustomer.Id;
                    //order.Customer = null;
                }
                order.OrderReference = orderReference;
                order.CreatedDate = DateTime.Now;
                //Save orderLines
                var orderLines = order.OrderLines;
                
                //order.OrderLines = null;
                Order newOrder = context.UpdateGraph<Order>(order);
                context.SaveChanges();
                foreach (var lines in orderLines) {
                    lines.OrderId = newOrder.Id;
                    lines.ShippingStatus = OrderStatus.New;
                    //lines.Order = null;
                    var prices = applicationRequestContext.ProductManager.GetpriceByproductId(lines.ProductId).FirstOrDefault();
                    if (prices != null)
                    {
                        
                        lines.UserId = prices.UserId;
                        decimal? totalAmount = 0;
                        if (prices.UnitPrice.HasValue) totalAmount += prices.UnitPrice.Value;
                        if (prices.TaxAmount.HasValue) totalAmount += prices.TaxAmount.Value;
                        lines.PriceInclTax = totalAmount.Value;
                        lines.Discount = prices.Discount.HasValue ? prices.Discount.Value :0;
                        lines.SubTotal = lines.Quantity * (totalAmount.Value - prices.Discount.Value);
                    }
                    OrderLine newLine = context.UpdateGraph<OrderLine>(lines);
                    context.SaveChanges();
                }
//Save Order
            }
            return orderReference;
        }
        public string GetAutoGeneratedOrderNumber()
        {

            if (AutoOrderNumberSetting == null) return null;
            // Initial setup, if we do not know Id of property. This will only run once per application start
            if (autoOrderNumberPropertyId.HasValue == false)
            {
                lock (autoOrderNumberLock)
                {
                    if (autoOrderNumberPropertyId.HasValue == false)
                    {
                        try
                        {
                            using (var ctx = new ServerModelContext(ServerModelDatabaseContextManager.Default.GetConnectionString()))
                            {
                                // Get type. Create if not exists.
                                var property = ctx.KnownProperties.Where(pt => pt.PropertyCode == KnownPropertyCodes.AutoOrderNumberIterator).FirstOrDefault();
                                if (property == null)
                                {
                                    property = new KnownProperty { PropertyCode = KnownPropertyCodes.AutoOrderNumberIterator,Decimal = AutoOrderNumberSetting.StartSequnceNumber };
                                    ctx.KnownProperties.Add(property);
                                    ctx.SaveChanges();
                                }

                                autoOrderNumberPropertyId = property.Id;
                            }
                        }
                        catch (Exception exception)
                        {
                            throw new ArgumentException("Could not initialize order number for auto generation", exception);
                        }
                    }
                }
            }

            const string sql =
        @"BEGIN TRANSACTION;
        SELECT [Decimal] FROM [KnownProperties] WHERE Id = @param1;
        UPDATE [KnownProperties] SET [Decimal] = [Decimal] + 1 WHERE Id = @param1;
        COMMIT TRANSACTION;";

            int index;
            lock (autoOrderNumberLock)
            {
                using (var context = new ServerModelContext(ServerModelDatabaseContextManager.Default.GetConnectionString()))
                {
                    var result = context.Database.SqlQuery<decimal?>(sql, new System.Data.SqlClient.SqlParameter("param1", autoOrderNumberPropertyId.Value)).FirstOrDefault();
                    if (result.HasValue == true)
                    {
                        index = (int)result.Value;
                    }
                    else
                    {
                        throw new ArgumentException("Could not get order number for auto generation");
                    }
                }
            }

            try
            {
                string formattedNumber = string.Format(AutoOrderNumberSetting.Pattern, index);

                return formattedNumber;
            }
            catch (Exception exception)
            {
                throw new ArgumentException("The specified auto order number pattern is invalid", exception);
            }

          
        }
    }


}